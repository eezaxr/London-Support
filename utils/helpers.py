import discord
import io
from datetime import datetime
from config import STAFF_ROLE

def is_staff():
    """Check if user has staff role"""
    async def predicate(ctx):
        staff_role = ctx.guild.get_role(STAFF_ROLE)
        return staff_role in ctx.author.roles
    return discord.ext.commands.check(predicate)

def is_ticket_channel():
    """Check if command is used in a ticket channel"""
    async def predicate(ctx):
        return ctx.channel.name.startswith("ticket-")
    return discord.ext.commands.check(predicate)

def is_authorized_user(user_id: int):
    """Check if user is authorized (for repair command)"""
    async def predicate(ctx):
        return ctx.author.id == user_id
    return discord.ext.commands.check(predicate)

async def get_user_from_channel(bot, channel):
    """Extract user ID from ticket channel name and return user object"""
    try:
        user_id = int(channel.name.split("-")[1])
        return bot.get_user(user_id) or await bot.fetch_user(user_id)
    except (ValueError, IndexError):
        return None

async def create_transcript(channel):
    """Create a transcript of the ticket channel"""
    transcript = f"Transcript for {channel.name}\nGenerated at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\nGenerated by SereneEnterprise, all rights reserved (c) (Taken from London Network)\n"
    transcript += "=" * 50 + "\n\n"

    async for message in channel.history(limit=None, oldest_first=True):
        timestamp = message.created_at.strftime("%Y-%m-%d %H:%M:%S")

        if message.embeds and not message.content:
            # Handle embed messages
            for embed in message.embeds:
                if embed.author:
                    transcript += f"[{timestamp}] {embed.author.name}: {embed.description}\n"
                else:
                    transcript += f"[{timestamp}] {message.author}: {embed.description}\n"
        else:
            transcript += f"[{timestamp}] {message.author}: {message.content}\n"

        # Add attachments info
        for attachment in message.attachments:
            transcript += f"    ðŸ“Ž Attachment: {attachment.filename} ({attachment.url})\n"

        transcript += "\n"

    # Create file object
    transcript_file = io.StringIO(transcript)
    return discord.File(transcript_file, filename=f"transcript-{channel.name}.txt")

async def send_dm_safely(user, embed=None, content=None):
    """Safely send DM to user, return success status"""
    try:
        if embed:
            await user.send(embed=embed)
        else:
            await user.send(content)
        return True
    except discord.Forbidden:
        return False
    except Exception:
        return False